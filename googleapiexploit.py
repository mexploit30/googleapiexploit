import sys
import time
import requests
import random
import argparse
from concurrent.futures import ThreadPoolExecutor

def get_cities_from_file(file_path):
    with open(file_path, "r") as file:
        cities = [line.strip() for line in file.readlines()]
    return cities

def get_random_cities(cities, num_cities):
    # Choose random cities from the list
    random_cities = random.sample(cities, num_cities)
    return random_cities

def fetch_data(api_key, city):
    # Base URL for Google Places API text search
    base_url = "https://maps.googleapis.com/maps/api/place/textsearch/json"
    
    # Construct the query URL
    query = f"restaurants in {city}"
    url = f"{base_url}?query={query}&key={api_key}"
    
    # Make the API request
    response = requests.get(url)
    data = response.json()
    
    # Print results to the console
    if "results" in data and data["results"]:
        first_result = data["results"][0]
        place_name = first_result["name"]
        print(f"Results found in {city}: {url}")
    else:
        print(f"No results found in {city}")

def print_rainbow_text(text):
    colors = ['\033[91m', '\033[93m', '\033[92m', '\033[94m', '\033[95m', '\033[96m']

    for char, color in zip(text, colors * (len(text) // len(colors) + 1)):
        sys.stdout.write(color + char)
        sys.stdout.flush()
        time.sleep(0.1)

    print('\033[0m')  # Reset color

def main(api_key, num_cities, num_threads):
    # Print the rainbow text splash screen
    print_rainbow_text("Created by m3xpl0it")

    # Get cities from the file
    cities_file_path = "cities.txt"  # Change this to the actual path of your file
    cities = get_cities_from_file(cities_file_path)
    
    # Make sure the requested number of cities is not more than available in the file
    num_cities = min(num_cities, len(cities))
    
    # Get random cities
    random_cities = get_random_cities(cities, num_cities)
    
    # Use ThreadPoolExecutor to fetch data concurrently
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        # Pass the API key as a constant argument to the function using lambda
        executor.map(lambda city: fetch_data(api_key, city), random_cities)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Fetch restaurant data from random cities using Google Places API.")
    parser.add_argument("--api-key", "-k", help="Your Google Places API key", required=True)
    parser.add_argument("--cities", "-c", type=int, help="Number of random cities to call", required=True)
    parser.add_argument("--threads", "-t", type=int, help="Number of threads to use", default=5)

    args = parser.parse_args()
    main(args.api_key, args.cities, args.threads)
